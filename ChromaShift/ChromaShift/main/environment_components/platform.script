go.property("speed", 0)
go.property("last", false)
go.property("size", 0)
go.property("has_child", false)

function init(self)
	self.velocity = -self.speed
	self.game_over_state = Util.Game_Over
end


local function Draw_par(position, velocity, acceleration, colour)
	local pos = position
	local startPos = pos
	local endPos = pos
	local vel = velocity or Util.GetPlatProps().vel
	local acc = acceleration or Util.GetFallProps().acc
	
	local dt = 0
	repeat 
		dt = dt + 0.1

		local y = pos.y + vel.y*dt + (1/2)*acc.y*dt*dt
		--vel.y = vel.y - acc.y*dt

		local x = pos.x + vel.x*dt + (1/2)*acc.x*dt*dt
		--vel.x = vel.x - acc.x*dt

		endPos = vmath.vector3(x,y,pos.z)
		--print("start = ", startPos, " end pos = ", endPos)
		msg.post("@render:", "draw_line", { start_point = startPos, end_point = endPos, color = colour } )
		startPos = endPos
	until endPos.y < 0
	return endPos
end

local function Draw_par_Superposition(position, velocity1, acceleration1, velocity2, acceleration2, colour)
	local pos = position
	local startPos = pos
	local endPos = pos
	local vel1 = velocity1 or Util.GetPlatProps().vel
	local acc1 = acceleration1 or Util.GetJumpProps().acc
	local vel2 = velocity2 or Util.GetPlatProps().vel
	local acc2 = acceleration2 or Util.GetFallProps().acc
	
	local midpoint = false
	local t_ymax = -vel1.y/acc1.y
	local y_max = pos.y + vel1.y*t_ymax + (1/2)*acc1.y*t_ymax*t_ymax
	local x_max = pos.x + vel1.x*t_ymax + (1/2)*acc1.x*t_ymax*t_ymax
	local pos2 = vmath.vector3(x_max,y_max,pos.z)
	
	local dt = 0
	local dt2 = 0.1
	repeat 
		dt = dt + 0.1

		local y1 = pos.y + vel1.y*dt + (1/2)*acc1.y*dt*dt
		local y2 = y1 + vel2.y*dt2 + (1/2)*acc2.y*dt2*dt2
		local y = y1
		--vel.y = vel.y - acc.y*dt

		local x1 = pos.x + vel1.x*dt + (1/2)*acc1.x*dt*dt
		local x2 = x1 + vel2.x*dt2 + (1/2)*acc2.x*dt2*dt2
		local x = x1
		--vel.x = vel.x - acc.x*dt

		if	dt >= t_ymax then
			y = y2
			x = x2
			dt2 = dt2 + 0.1
		end

		endPos = vmath.vector3(x,y,pos.z)
		--print("start = ", startPos, " end pos = ", endPos)
		msg.post("@render:", "draw_line", { start_point = startPos, end_point = endPos, color = colour } )
		startPos = endPos
		if dt > 5 then
			break
		end
	until endPos.y < 0
	return endPos
end


function Draw_circle(position, diameter, sprite_scale, segment_count, colour)
	local radius = (diameter * sprite_scale) / 2
	local step = math.rad(360) / segment_count
	local point_a = vmath.vector3(position.x + radius, position.y, 0)
	for i = 1, segment_count do
		local angle = i * step
		local point_b = vmath.vector3(position.x + radius * math.cos(angle), position.y + radius * math.sin(angle), 0)
		msg.post("@render:", "draw_line", { start_point = point_a, end_point = point_b, color = colour } )
		point_a = point_b
	end
end -- draw_circle

	

function update(self, dt)
	
	if Util.Pause or Util.GetPlayerProps().dead or Util.Tutorial or Util.Game_Over then 
		dt = 0
	end
	
	local pos = go.get_position()
	pos.x = pos.x + dt*self.velocity
	go.set_position(pos)
	if self.last then

		local pos = go.get_position()
		pos.y = pos.y + 4
		if self.size == 1 then
			pos.x = pos.x + 100
		elseif self.size == 2 then
			pos.x = pos.x + 10
		end
		-- close / fall
		--Draw_par(pos, Util.GetPlatProps().vel, Util.GetFallProps().acc, vmath.vector4(0,1,0,0.5))
		-- far
		

		-- close + (jump + fall)
		--Draw_par_Superposition(pos, Util.GetPlatProps().vel + Util.GetJumpProps().vel, Util.GetJumpProps().acc, Util.GetPlatProps().vel, Util.GetFallProps().acc, vmath.vector4(0,0,1,0.5))
		-- jump
		--Draw_par(pos, Util.GetPlatProps().vel + Util.GetJumpProps().vel, Util.GetJumpProps().acc, vmath.vector4(1,0,0,0.5))
	end
		
	if	pos.x < -400 then
		go.delete(".",self.has_child)
	end

	if self.game_over_state and not Util.Game_Over then			-- if the global setting has changed from true to false (ie new game started)
		go.delete(".",self.has_child)
	end
	self.game_over_state = Util.Game_Over
	
	
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end